local ____exports = {}
local druid = require("druid.druid")
local ____utils = require("utils.utils")
local show_gui_list = ____utils.show_gui_list
local hide_gui_list = ____utils.hide_gui_list
local set_text = ____utils.set_text
local get_nodes = ____utils.get_nodes
local ____Buttons = require("game.gui_utility.Buttons")
local Buttons = ____Buttons.Buttons
local ____settings_utility = require("utils.settings_utility")
local apply_settings = ____settings_utility.apply_settings
local ____game_config = require("main.game_config")
local ADS_CONFIG = ____game_config.ADS_CONFIG
local IS_HUAWEI = ____game_config.IS_HUAWEI
function ____exports.init(self)
    local init_ui, nodes, btns
    function init_ui(self)
        apply_settings()
        if System.platform ~= "HTML5" then
            btns["btn_exit/btn"]:on(function() return sys.exit(0) end)
        end
        if System.platform == "HTML5" then
            btns["btn_exit/btn"]:enable(false)
            hide_gui_list({"home_name"})
            if not GAME_CONFIG.is_portrait then
                local pos = gui.get_position(nodes["btn_settings/btn"])
                pos.x = 150
                gui.set_position(nodes["btn_settings/btn"], pos)
                pos.x = pos.x * -1
                gui.set_position(nodes["btn_stats/btn"], pos)
                pos = gui.get_position(nodes["btn_play/btn"])
                pos.x = 0
                gui.set_position(nodes["btn_play/btn"], pos)
            end
        end
        if IS_HUAWEI then
            set_text(
                "home_name",
                Lang.get_lang() == "ru" and "Свободная ячейка" or "Freecell"
            )
        end
        if System.platform ~= "iPhone OS" then
            hide_gui_list({"btnPrivacy"})
        else
            set_text(
                "privacy",
                Lang.get_lang() == "ru" and "Политика конфиденциальности" or "Privacy Policy"
            )
        end
    end
    Manager.init_script()
    if not GameStorage.get("tutorial_done") then
        Scene.load("game")
    end
    self.druid = druid.new(self)
    local node_names = {
        "btn_exit/btn",
        "btn_settings/btn",
        "btn_stats/btn",
        "btn_play/btn",
        "root"
    }
    nodes = get_nodes(node_names)
    btns = Buttons(self.druid, nodes, "/btn")
    btns["btn_play/btn"]:on(function() return Scene.load("game") end)
    btns["btn_stats/btn"]:on(function()
        Scene.load("stats")
    end)
    btns["btn_settings/btn"]:on(function() return Scene.load("settings") end)
    self.update_ui = init_ui
    init_ui(nil)
    if ADS_CONFIG.is_mediation and System.platform ~= "HTML5" and Lang.is_gdpr() then
        log("check request GDPR")
        local gdpr = Storage.get_int("gdpr", -1)
        if gdpr == -1 then
            log("request GDPR")
            local is_checked = true
            show_gui_list({"gdpr_block"})
            self.druid:new_blocker("gdpr_block")
            self.druid:new_button(
                "gdpr_url",
                function() return sys.open_url(Lang.get_lang() == "ru" and "https://sb-games.ru/policy-ru.html" or "https://sb-games.ru/policy.html") end
            )
            self.druid:new_checkbox(
                "gdpr_check_box",
                function(_, val)
                    is_checked = val
                    return is_checked
                end,
                "gdrp_is_readed",
                is_checked
            )
            self.druid:new_button(
                "btnGdprOk",
                function()
                    hide_gui_list({"gdpr_block"})
                    Storage.set("gdpr", is_checked and 1 or 0)
                    yandexads.set_user_consent(is_checked)
                end
            )
        end
    end
    if System.platform == "iPhone OS" then
        self.druid:new_button(
            "btnPrivacy",
            function() return sys.open_url(Lang.get_lang() == "ru" and "https://sb-games.ru/policy-ru.html" or "https://sb-games.ru/policy.html") end
        )
    end
end
function ____exports.on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end
function ____exports.update(self, dt)
    self.druid:update(dt)
end
function ____exports.on_message(self, message_id, message, sender)
    if message_id == hash("layout_changed") then
        self:update_ui()
    end
    self.druid:on_message(message_id, message, sender)
end
function ____exports.final(self)
    Manager.final_script()
    self.druid:final()
end
init = ____exports.init
on_input = ____exports.on_input
update = ____exports.update
on_message = ____exports.on_message
final = ____exports.final

